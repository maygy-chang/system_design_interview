(1)使用者搜尋的特徵: 
   自動補齊
   根據字元排序
   邊打邊搜尋
   建增式搜尋
而這個問題也稱之為設計一個top k 或者top k most searched queries
(2)規格需求?
    字串matching需求:matching query一開始，還是中間
    自動補齊的建議數量?
    要返回那些建議?
    是否支援拼字檢查?
    是否支援多語系?
    是否支援大小寫?
    多少使用者使用? daily active users(DAU)
    反應時間?
    自動補齊的相關性?
    系統的擴充性?
    24小時不斷線?
 (3)假設有10M個DAU，平均每user每天執行10個searches，每個query string是20bytes，假設一個query是4個字，每個字約包含5個字元
    (以ASCII編碼統計，一個字元是1BYTE)。每個query約是4*5=20 bytes
    當使用者輸入一個query，query=dinner
    search?q=d
    search?q=di
    search?q=din
    ........
    一個字元一個request，一般一個search query約有20個requests，10MDAU*10quires/day*20characters/24hours/3600seconds=24000 query per second(QPS)
    Peak時段的QPS=24000*2=48000 (設計一個系統必須能考慮是否能COVER PEAK時段)
    倘若每天增加20%新users，20%*48000*20 byte/query=0.4GB，即每天需增加0.4GB的儲存容量。(需考慮儲存空間大小)
 (4)這個系統分成兩個部分:
    資料收集:
    - 他必須即時收集和整合資料
    查詢服務
    - 一個查詢要回復五個權重最高的建議
  (5)深入探討
     5-1)資料結構通常會以tries儲存，其字串長度為其樹深度，每周create一個tries
     5-2)系統架構: Trie DB + Trie Cache + Works
        5-2-1) Workers: 週期性執行非同步JOB，資料儲存在Trie DB (Elasticsearch)
        5-2-2) Trie Cache: 用分散式的Cache儲存在Memory中便於快速查詢 (Redis)
        5-2-3) Trie DB. Persistent 儲存
               Document Store - 如MongoDB，存儲搜尋行為
               Key-value Store - 如Elasticsearch，存儲搜尋紀錄 
  (6)最佳化PATH
     6-1)使用者查詢步驟:
         6-1-1)使用者搜尋會送到Load Balancer
         6-1-2)Load Balancer送到API Server
         6-1-3)API Server從Cache拿資料，並回傳建議
         6-1-4)資料不在CACHE，從DB查詢
     6-2)網頁伺服器最佳化
         6-2-1) AJAX request
         6-2-2) Browser caching
         6-2-3) Data sampling for logging every search query
     6-3) Trie操作最佳化
         6-3-1)worker整合所需資料
         6-3-2)更新: 
               1) 一個禮拜建立一個trie (Elasticsearch index)，取代舊的trie
               2) 直接更新trie資料
         6-3-3)移除:
               1) 過濾不雅字眼
               2) 更新trie中不雅字眼
  (7)擴充儲存
     7-1-1) 切割資料方式，需參考歷史資料的分布情形，來決定如何sharding，降低DB資料分布不平均的情形
  
    
    
    
